name: CI/CD Pipeline

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    steps:
      # Шаг 1: Клонирование репозитория
      - name: Checkout code
        uses: actions/checkout@v3

      # Шаг 2: Установка Docker
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      # Шаг 3: Установка Docker Compose
      - name: Install Docker Compose
        run: |
          sudo apt-get update
          sudo apt-get install -y docker-compose

      # Шаг 4: Сборка Docker-образов
      - name: Build Docker images
        run: |
          docker build -t labwork5ad-data-ingestion:latest ./data-ingestion-service
          docker build -t labwork5ad-bot-detection:latest ./bot-detection-service
          docker build -t labwork5ad-data-visualization:latest ./data-visualization-service

      # Шаг 5: Проверка существования образов
      - name: Check if Docker images exist
        run: |
          docker images labwork5ad-data-ingestion:latest
          docker images labwork5ad-bot-detection:latest
          docker images labwork5ad-data-visualization:latest

      # Шаг 6: Запуск сервисов через Docker Compose
      - name: Start services with Docker Compose
        run: |
          docker-compose up -d

      # Шаг 7: Ждем, пока сервисы запустятся
      - name: Wait for services to start
        run: |
          echo "Waiting for services to start..."
          sleep 5

      # Шаг 8: Проверка состояния сервисов
      - name: Check service status
        run: |
          echo "Checking if services are up..."
          DATA_INGESTION_STATUS=$(curl -o /dev/null -s -w "%{http_code}" http://localhost:5000/data)
          BOT_DETECTION_STATUS=$(curl -o /dev/null -s -w "%{http_code}" -X POST -H "Content-Type: application/json" -d '{"data": "test"}' http://localhost:5001/detect)
          DATA_VISUALIZATION_STATUS=$(curl -o /dev/null -s -w "%{http_code}" http://localhost:5002/visualize)

          if [ "$DATA_INGESTION_STATUS" -ne 200 ]; then
            echo "data-ingestion-service returned status code $DATA_INGESTION_STATUS"
            exit 1
          fi

          if [ "$BOT_DETECTION_STATUS" -ne 200 ]; then
            echo "bot-detection-service returned status code $BOT_DETECTION_STATUS"
            exit 1
          fi

          if [ "$DATA_VISUALIZATION_STATUS" -ne 200 ]; then
            echo "data-visualization-service returned status code $DATA_VISUALIZATION_STATUS"
            exit 1
          fi

      # Шаг 9: Вывод логов в случае ошибки
      - name: Debug service logs
        if: failure()
        run: |
          docker-compose logs data-ingestion
          docker-compose logs bot-detection
          docker-compose logs data-visualization

      # Шаг 10: Запуск интеграционных тестов
      - name: Run integration tests
        run: |
          python -m unittest discover tests

      # Шаг 11: Остановка контейнеров после тестов
      - name: Stop services with Docker Compose
        if: always()
        run: |
          docker-compose down --rmi none

      # Шаг 1: Вход в Docker Hub
      - name: Login to Docker Hub
        run: echo "${{ secrets.DOCKERHUB_TOKEN }}" | docker login -u ${{ secrets.DOCKERHUB_USERNAME }} --password-stdin

      # Шаг 2: Тегирование и публикация Docker-образов
      - name: Push Docker images to Docker Hub
        run: |
          docker tag labwork5ad-data-ingestion:latest ${{ secrets.DOCKERHUB_USERNAME }}/data-ingestion-service:latest
          docker tag labwork5ad-bot-detection:latest ${{ secrets.DOCKERHUB_USERNAME }}/bot-detection-service:latest
          docker tag labwork5ad-data-visualization:latest ${{ secrets.DOCKERHUB_USERNAME }}/data-visualization-service:latest  

          docker push ${{ secrets.DOCKERHUB_USERNAME }}/data-ingestion-service:latest
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/bot-detection-service:latest
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/data-visualization-service:latest