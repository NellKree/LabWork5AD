name: CI/CD Pipeline

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Install Docker Compose
        run: |
          sudo apt-get update
          sudo apt-get install -y docker-compose

      - name: Build Docker images
        run: |
          docker build --no-cache -t labwork5ad-data-ingestion:latest ./data-ingestion-service
          docker build --no-cache -t labwork5ad-bot-detection:latest ./bot-detection-service

      - name: Check if Docker images exist
        run: docker images

      - name: Save Docker images as artifacts
        run: |
          docker save labwork5ad-data-ingestion:latest -o data-ingestion.tar
          docker save labwork5ad-bot-detection:latest -o bot-detection.tar

      - name: Upload Docker images
        uses: actions/upload-artifact@v3
        with:
          name: docker-images
          path: |
            data-ingestion.tar
            bot-detection.tar

      - name: Start services with Docker Compose
        run: docker-compose up -d

      - name: Wait for services to start
        run: |
          echo "Waiting for services to start..."
          sleep 5

      - name: Check service status
        run: |
          DATA_INGESTION_STATUS=$(curl -o /dev/null -s -w "%{http_code}" http://localhost:5000/data)
          BOT_DETECTION_STATUS=$(curl -o /dev/null -s -w "%{http_code}" -X POST -H "Content-Type: application/json" -d '{"data": "test"}' http://localhost:5001/detect)
          if [ "$DATA_INGESTION_STATUS" -ne 200 ]; then
            echo "data-ingestion-service returned status code $DATA_INGESTION_STATUS"
            exit 1
          fi
          if [ "$BOT_DETECTION_STATUS" -ne 200 ]; then
            echo "bot-detection-service returned status code $BOT_DETECTION_STATUS"
            exit 1
          fi

      - name: Debug service logs
        if: failure()
        run: |
          docker-compose logs data-ingestion
          docker-compose logs bot-detection

      - name: Run integration tests
        run: python -m unittest discover tests

      - name: Stop services with Docker Compose
        if: always()
        run: docker-compose down --rmi none

  deploy:
    needs: build-and-test
    runs-on: ubuntu-latest

    steps:
      - name: Download Docker images
        uses: actions/download-artifact@v3
        with:
          name: docker-images

      - name: Load Docker images
        run: |
          docker load -i data-ingestion.tar
          docker load -i bot-detection.tar

      - name: Login to Docker Hub
        run: echo "${{ secrets.DOCKERHUB_TOKEN }}" | docker login -u ${{ secrets.DOCKERHUB_USERNAME }} --password-stdin

      - name: Check if Docker images exist before tagging
        run: docker images

      - name: Push Docker images to Docker Hub
        run: |
          docker tag labwork5ad-data-ingestion:latest ${{ secrets.DOCKERHUB_USERNAME }}/data-ingestion-service:latest
          docker tag labwork5ad-bot-detection:latest ${{ secrets.DOCKERHUB_USERNAME }}/bot-detection-service:latest
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/data-ingestion-service:latest
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/bot-detection-service:latest

      - name: Log successful deployment
        run: echo "Docker images have been successfully pushed to Docker Hub."

      - name: Save image version
        run: echo "IMAGE_VERSION=$(date +%Y%m%d%H%M%S)" >> $GITHUB_ENV
